package com.project.euler;

import java.io.*;
import java.util.Scanner;

/**
 Even Fibonacci numbers
 Problem 2
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
 the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

public class EvenFibonacciSum {

    private static final String dirPath = System.getProperty("user.dir") + File.separator
            + "target" + File.separator + "classes" + File.separator + "projecteuler"
            + File.separator + EvenFibonacciSum.class.getSimpleName() + File.separator;
    private static final String input = dirPath + "Test.in";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(input))));
        int n = in.nextInt();
        System.out.println(solution(n));
    }



    /**
     * You know every third term of fibonacci sequence is even term
     * 1    1   [2]    3    5    [8]    13    21    [34]     55      89      [144]
     * O(log n)
     * @param limit
     * @return
     */
    public static int solution(int limit) {
        int a=1;
        int b=1;
        int sum=0;
        int c=a+b;
        while(c<=limit){
            sum +=c; // Only counting even terms
            a = b+c;
            b = c+a;
            c = a+b;
        }
        return sum;
    }
}

